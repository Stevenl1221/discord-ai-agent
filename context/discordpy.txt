========================
CODE SNIPPETS
========================
TITLE: Wait for bot readiness before starting a task
DESCRIPTION: Explains how to ensure a background task only starts after the bot has finished its initial setup and is ready. This is achieved using the `@tasks.loop.before_loop` decorator and `bot.wait_until_ready()`.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/tasks/index

LANGUAGE: Python
CODE:
```
from discord.ext import tasks, commands

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.index = 0
        self.bot = bot
        self.printer.start()

    def cog_unload(self):
        self.printer.cancel()

    @tasks.loop(seconds=5.0)
    async def printer(self):
        print(self.index)
        self.index += 1

    @printer.before_loop
    async def before_printer(self):
        print('waiting...')
        await self.bot.wait_until_ready()
```

----------------------------------------

TITLE: Set Default Allowed Installs
DESCRIPTION: Sets the default allowed install locations for all application commands in the tree. This can be overridden on a per-command basis.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
from discord import InstallContext

bot = commands.Bot(command_prefix='!', allowed_installs=[InstallContext.guild_home, InstallContext.user_chat])
```

----------------------------------------

TITLE: Async Webhook send example in discord.py
DESCRIPTION: This code example illustrates the change in how asynchronous webhooks are sent in discord.py. The 'adapter' parameter has been replaced by a direct 'session' parameter for aiohttp client sessions.

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
import discord
import aiohttp

# before
async with aiohttp.ClientSession() as session:
    webhook = discord.Webhook.from_url('url-here', adapter=discord.AsyncWebhookAdapter(session))
    await webhook.send('Hello World', username='Foo')

# after
async with aiohttp.ClientSession() as session:
    webhook = discord.Webhook.from_url('url-here', session=session)
    await webhook.send('Hello World', username='Foo')
```

----------------------------------------

TITLE: Configuring AutoShardedClient with Specific Shard Counts
DESCRIPTION: Provides examples of how to configure `discord.AutoShardedClient` to launch a specific number of shards or a subset of shard IDs within a process.

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating_to_v1

LANGUAGE: Python
CODE:
```
# launch 10 shards regardless
client = discord.AutoShardedClient(shard_count=10)

# launch specific shard IDs in this process
client = discord.AutoShardedClient(shard_count=10, shard_ids=(1, 2, 5, 6))
```

----------------------------------------

TITLE: Initializing AutoShardedClient
DESCRIPTION: Shows how to initialize `discord.AutoShardedClient` for bots that need to manage sharding across multiple processes without manual IPC handling.

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating_to_v1

LANGUAGE: Python
CODE:
```
client = discord.AutoShardedClient()
```

----------------------------------------

TITLE: Handle No Entry Point Error Exception in discord.py
DESCRIPTION: This exception is raised when an extension does not have the required 'setup' entry point function. It inherits from ExtensionError and indicates that the extension is not properly configured for loading.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: python
CODE:
```
class NoEntryPointError(ExtensionError):
    """Raised when an extension does not have a setup entry point function.

    Inherited from ExtensionError.
    """
    pass
```

----------------------------------------

TITLE: discord.ext.tasks.Loop: Start and Stop Methods
DESCRIPTION: The `start()` method initiates the background task, accepting arbitrary arguments. The `stop()` method gracefully halts the task, allowing the current iteration to complete. `cancel()` is also available for immediate termination.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/tasks/index

LANGUAGE: python
CODE:
```
import discord
from discord.ext import tasks

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.my_loop.start(arg1='value1')

    @tasks.loop(seconds=60)
    async def my_loop(self, arg1):
        print(f'Looping with argument: {arg1}')

    async def stop_loop(self):
        self.my_loop.stop()
        print('Loop stopped.')

    async def cancel_loop(self):
        self.my_loop.cancel()
        print('Loop cancelled.')
```

----------------------------------------

TITLE: Using aiohttp ClientSession for Requests
DESCRIPTION: Demonstrates the recommended way to make HTTP requests using `aiohttp` by creating a `ClientSession` and using it for multiple requests, rather than creating a new session for each request.

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating_to_v1

LANGUAGE: Python
CODE:
```
async with aiohttp.ClientSession() as sess:
    async with sess.get('url') as resp:
        # work with resp
```

----------------------------------------

TITLE: Migrating from bot.say to ctx.send
DESCRIPTION: Illustrates the change in the command extension where `bot.say` is replaced by `ctx.send` for sending messages, making the `Context` object directly usable for message sending.

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating_to_v1

LANGUAGE: Python
CODE:
```
# before
@bot.command()
async def foo():
    await bot.say('Hello')

# after
@bot.command()
async def foo(ctx):
    await ctx.send('Hello')
```

----------------------------------------

TITLE: Using Custom Context Subclasses
DESCRIPTION: Demonstrates how to create a custom context class by subclassing `commands.Context` and how to integrate it with the bot to add custom functionality, such as a `secret` property.

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating_to_v1

LANGUAGE: Python
CODE:
```
class MyContext(commands.Context):
    @property
    def secret(self):
        return 'my secret here'

class MyBot(commands.Bot):
    async def on_message(self, message):
        ctx = await self.get_context(message, cls=MyContext)
        await self.invoke(ctx)

@bot.command()
async def secret(ctx):
    await ctx.send(ctx.secret)
```

----------------------------------------

TITLE: Add AppInfo.approximate_user_install_count
DESCRIPTION: Adds `AppInfo.approximate_user_install_count` to provide an approximate count of user installs for an application.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: Python
CODE:
```
from discord.appinfo import AppInfo

# Example usage (conceptual):
# app_info: AppInfo
# install_count = app_info.approximate_user_install_count

```

----------------------------------------

TITLE: Create a simple background task in a Cog
DESCRIPTION: Demonstrates how to create a basic background task that runs every 5 seconds within a Cog. It includes starting the task in the Cog's constructor and cancelling it when the Cog is unloaded.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/tasks/index

LANGUAGE: Python
CODE:
```
from discord.ext import tasks, commands

class MyCog(commands.Cog):
    def __init__(self):
        self.index = 0
        self.printer.start()

    def cog_unload(self):
        self.printer.cancel()

    @tasks.loop(seconds=5.0)
    async def printer(self):
        print(self.index)
        self.index += 1
```

----------------------------------------

TITLE: Sync Webhook send example in discord.py
DESCRIPTION: This code snippet shows the updated method for sending synchronous webhooks in discord.py. The 'partial' method now uses 'SyncWebhook' directly, and the 'adapter' parameter is removed.

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
import discord

# before
webhook = discord.Webhook.partial(123456, 'token-here', adapter=discord.RequestsWebhookAdapter())
webhook.send('Hello World', username='Foo')

# after
webhook = discord.SyncWebhook.partial(123456, 'token-here')
webhook.send('Hello World', username='Foo')
```

----------------------------------------

TITLE: Add AutoShardedClient.fetch_session_start_limits
DESCRIPTION: Adds `AutoShardedClient.fetch_session_start_limits()` to retrieve session start limits for sharded clients.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: Python
CODE:
```
from discord.client import AutoShardedClient

# Example usage (conceptual):
# limits = await auto_sharded_client.fetch_session_start_limits()

```

----------------------------------------

TITLE: Handling Multiple Return Values from wait_for
DESCRIPTION: Illustrates how `Client.wait_for` can return multiple values, such as when waiting for reaction events, where both the reaction and the user are returned.

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating_to_v1

LANGUAGE: Python
CODE:
```
reaction, user = await client.wait_for('reaction_add', check=lambda r, u: u.id == 176995180300206080)
```

----------------------------------------

TITLE: Add Cog with Guild Restriction using setup
DESCRIPTION: This example demonstrates how to add a cog to the bot and restrict its application commands to a specific guild using the `bot.add_cog()` method with the `guild` argument in the `setup` function.

SOURCE: https://discordpy.readthedocs.io/ja/stable/faq

LANGUAGE: python
CODE:
```
from discord.ext import commands
from discord import app_commands, Interaction
import discord

# class MyCog(commands.Cog):
#     @app_commands.command()
#     async def ping(self, interaction: Interaction):
#         await interaction.response.send_message("Pong!")

# async def setup(bot: commands.Bot) -> None:
#     await bot.add_cog(MyCog(...), guild=discord.Object(123456789012345678))
```

----------------------------------------

TITLE: Handle Extension Failed Exception in discord.py
DESCRIPTION: This exception is raised when an extension fails to load due to an error during module execution or the 'setup' function. It inherits from ExtensionError and provides the original exception for debugging.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: python
CODE:
```
class ExtensionFailed(ExtensionError):
    """Raised when an extension fails to load due to an error during module execution or the setup entry point.

    Inherited from ExtensionError.
    """
    def __init__(self, name, original):
        self.original = original
        super().__init__(f'Failed to load extension {name}: {original}', name=name)
```

----------------------------------------

TITLE: Handling asyncio.TimeoutError with wait_for
DESCRIPTION: Shows how `Client.wait_for` now raises an `asyncio.TimeoutError` when the specified timeout occurs, instead of returning `None`. This example includes a try-except block to handle the timeout.

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating_to_v1

LANGUAGE: Python
CODE:
```
def pred(m):
    return m.author == message.author and m.channel == message.channel

try:
    msg = await client.wait_for('message', check=pred, timeout=60.0)
except asyncio.TimeoutError:
    await channel.send('You took too long...')
else:
    await channel.send('You said {0.content}, {0.author}.'.format(msg))
```

----------------------------------------

TITLE: Connect to Discord Gateway
DESCRIPTION: Establishes a WebSocket connection to Discord and starts receiving messages. This function runs the event loop until the connection is closed. Supports reconnection on network failures.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
await _connect(_reconnect=True)
```

----------------------------------------

TITLE: discord.ext.tasks.Loop: Restart Method
DESCRIPTION: The `restart()` method provides a convenient way to restart the internal task. Unlike `start()`, this method does not return the created task object. It can accept arbitrary arguments for the new task instance.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/tasks/index

LANGUAGE: python
CODE:
```
import discord
from discord.ext import tasks

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.my_loop.start()

    @tasks.loop(seconds=60)
    async def my_loop(self):
        print('Looping...')

    async def restart_loop(self):
        self.my_loop.restart()
        print('Loop restarted.')
```

----------------------------------------

TITLE: Waiting for a Message with a Custom Predicate
DESCRIPTION: This snippet demonstrates how to use `client.wait_for` with a custom predicate function to wait for a specific message from the same author and channel.

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating_to_v1

LANGUAGE: Python
CODE:
```
def pred(m):
    return m.author == message.author and m.channel == message.channel

msg = await client.wait_for('message', check=pred)
```

----------------------------------------

TITLE: Get Application Information
DESCRIPTION: Retrieves the bot's application information. This is useful for obtaining details like the bot's username and client ID without needing to establish a gateway connection first.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: python
CODE:
```
app_info = await bot.application_info()
print(f"Bot Name: {app_info.name}")
print(f"Bot ID: {app_info.id}")
```

----------------------------------------

TITLE: Get Registered Commands
DESCRIPTION: Returns a set of registered commands, excluding aliases.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
commands
```

----------------------------------------

TITLE: Get Bot Cogs
DESCRIPTION: Provides a read-only mapping of cog names to cog objects.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
cogs
```

----------------------------------------

TITLE: Get Available Emojis
DESCRIPTION: Retrieves a sequence of emojis available to the connected client. Does not include application-owned emojis.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
emojis
```

----------------------------------------

TITLE: Getting the Current Task in discord.py
DESCRIPTION: The get_task() method retrieves the internal asyncio.Task associated with the loop. It returns the task object if one is running, otherwise it returns None.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/tasks/index

LANGUAGE: Python
CODE:
```
get_task() -> Optional[asyncio.Task]

Optional[asyncio.Task]: Fetches the internal task or None if there isn't one running.
```

----------------------------------------

TITLE: Register Command to a Specific Guild using Decorator
DESCRIPTION: This example illustrates registering a command to a specific guild directly within the command decorator using the `guild` argument.

SOURCE: https://discordpy.readthedocs.io/ja/stable/faq

LANGUAGE: python
CODE:
```
from discord import app_commands, Interaction

# Assuming 'tree' is your CommandTree instance
# @tree.command(guild=discord.Object(123456789012345678))
# async def ping(interaction: Interaction):
#     await interaction.response.send_message("Pong!")
```

----------------------------------------

TITLE: Add Support for User-Installable Apps
DESCRIPTION: Enables user-installable applications by adding support for `allowed_installs` attributes to commands and context menus. It also introduces new functions like `app_commands.guild_install()` and `app_commands.user_install()`.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
import discord
from discord import app_commands

# Example of allowing user installs for a command
@app_commands.command(name="installable_command", description="This command can be installed by users.")
@app_commands.allowed_installs(app_commands.AppInstallationType.user)
async def installable_command(interaction: discord.Interaction):
    await interaction.response.send_message("You can install this command!")

# Example of checking integration type
@app_commands.command(name="check_integration", description="Checks the integration type.")
async def check_integration(interaction: discord.Interaction):
    if interaction.is_user_integration():
        await interaction.response.send_message("This is a user integration.")
    elif interaction.is_guild_integration():
        await interaction.response.send_message("This is a guild integration.")
    else:
        await interaction.response.send_message("Unknown integration type.")
```

----------------------------------------

TITLE: discord.ext.tasks.Loop: Decorator for Coroutine Before Loop
DESCRIPTION: The @before_loop decorator registers a coroutine to be executed before the loop starts. This is useful for waiting on bot states, such as `discord.Client.wait_until_ready()`. The coroutine must not take any arguments other than 'self' in a class context. Note that calling `stop()` within this coroutine will halt the loop before its first iteration.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/tasks/index

LANGUAGE: python
CODE:
```
import discord
from discord.ext import tasks

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.my_loop.start()

    @tasks.loop(seconds=60)
    async def my_loop(self):
        print('Looping...')

    @my_loop.before_loop
    async def before_my_loop(self):
        print('Waiting for bot to be ready...')
        await self.bot.wait_until_ready()
        print('Bot is ready, starting loop.')
```

----------------------------------------

TITLE: Get Pinned Messages as List (discord.py)
DESCRIPTION: Retrieves pinned messages from a channel and converts the asynchronous iterator into a list. This method is deprecated for retrieving a list directly. Requires 'view_channel' and 'read_message_history' permissions.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: python
CODE:
```
messages = [message async for message in channel.pins(limit=50)]
```

----------------------------------------

TITLE: Initialize Discord Bot
DESCRIPTION: Initializes the Discord bot asynchronously and handles automatic cleanup. This is a feature added in version 2.0.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
async with discord.ext.commands.Bot(...) as bot:
    # Bot operations here
```

----------------------------------------

TITLE: Iterate Pinned Messages (discord.py)
DESCRIPTION: Retrieves an asynchronous iterator of pinned messages in a channel. Requires 'view_channel' and 'read_message_history' permissions. Returns a paginated iterator, which can be awaited to get a list (deprecated). Note: Reaction data may be incomplete.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: python
CODE:
```
counter = 0
async for message in channel.pins(limit=250):
    counter += 1
```

----------------------------------------

TITLE: Support for Premium App Integrations
DESCRIPTION: Adds comprehensive support for premium app integrations, including SKU and entitlement management, new button styles for purchases, and one-time purchase options.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
import discord
from discord import ui

# Example of a button to purchase an SKU
class BuySKUButton(ui.Button):
    def __init__(self, sku_id: int):
        super().__init__(label="Buy Now", style=discord.ButtonStyle.premium, sku_id=sku_id)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_message("Initiating purchase process...")

# Example of fetching SKUs
async def fetch_and_display_skus(client: discord.Client):
    skus = await client.fetch_skus()
    print("Available SKUs:")
    for sku in skus:
        print(f"- {sku.name} ({sku.id}): {sku.price}")

# Example of checking entitlements
async def check_user_entitlements(client: discord.Client, user: discord.User):
    entitlements = await client.fetch_entitlements(user=user)
    print(f"Entitlements for {user.name}:")
    for entitlement in entitlements:
        print(f"- {entitlement.sku.name}")
```

----------------------------------------

TITLE: Add Client.fetch_guild_preview
DESCRIPTION: Introduces `Client.fetch_guild_preview()` to retrieve a preview of a guild's information.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: Python
CODE:
```
from discord.client import Client

# Example usage (conceptual):
# guild_preview = await client.fetch_guild_preview(guild_id)

```

----------------------------------------

TITLE: Set Bot Description
DESCRIPTION: Sets the string displayed at the beginning of the default help message.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
bot = commands.Bot(command_prefix='!', description='My awesome bot!')
```

----------------------------------------

TITLE: Schedule a task for multiple times daily
DESCRIPTION: Demonstrates how to schedule a background task to run at multiple specific times throughout the day by providing a list of `datetime.time` objects to the `time` parameter.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/tasks/index

LANGUAGE: Python
CODE:
```
import datetime
from discord.ext import commands, tasks

utc = datetime.timezone.utc

# If no tzinfo is given then UTC is assumed.
times = [
    datetime.time(hour=8, tzinfo=utc),
    datetime.time(hour=12, minute=30, tzinfo=utc),
    datetime.time(hour=16, minute=40, second=30, tzinfo=utc)
]

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.my_task.start()

    def cog_unload(self):
        self.my_task.cancel()

    @tasks.loop(time=times)
    async def my_task(self):
        print("My task is running!")
```

----------------------------------------

TITLE: Schedule a task for a specific time daily
DESCRIPTION: Shows how to schedule a background task to run once a day at a specific time using the `time` parameter with a `datetime.time` object. It includes setting the timezone for accurate scheduling.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/tasks/index

LANGUAGE: Python
CODE:
```
import datetime
from discord.ext import commands, tasks

utc = datetime.timezone.utc

# If no tzinfo is given then UTC is assumed.
time = datetime.time(hour=8, minute=30, tzinfo=utc)

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.my_task.start()

    def cog_unload(self):
        self.my_task.cancel()

    @tasks.loop(time=time)
    async def my_task(self):
        print("My task is running!")
```

----------------------------------------

TITLE: Add SKU Subscriptions Support
DESCRIPTION: Implements support for SKU subscriptions with new events like on_subscription_create, on_subscription_update, and on_subscription_delete. Introduces SubscriptionStatus enum and Subscription model, and adds SKU.fetch_subscription() and SKU.subscriptions() methods.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: Python
CODE:
```
from discord.enums import SubscriptionStatus
from discord.models import Subscription

# Example usage (conceptual):
# @client.event
# async def on_subscription_create(subscription: Subscription):
#     print(f"New subscription created: {subscription.id}")
#
# sku = await client.fetch_sku(sku_id)
# subscriptions = await sku.subscriptions()

```

----------------------------------------

TITLE: Create Test Entitlement
DESCRIPTION: Creates a test Entitlement for an application's SKU and owner. Requires application ID, owner ID, and owner type. Added in version 2.4.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
await _create_entitlement(sku, owner, owner_type)
```

----------------------------------------

TITLE: AsyncIterator.get() から discord.utils.get への移行
DESCRIPTION: メッセージ履歴から特定の条件に一致するメッセージを取得する際に、`AsyncIterator.get()` から `discord.utils.get()` ユーティリティ関数への移行を示すコード例です。

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
# before
msg = await channel.history().get(author__name='Dave')

# after
msg = await discord.utils.get(channel.history(), author__name='Dave')
```

----------------------------------------

TITLE: Create Guild
DESCRIPTION: Creates a Guild. Bot accounts with 10+ guilds cannot create more. Parameters 'name' and 'icon' are keyword-only. 'region' parameter removed in v2.0. Raises ValueError for invalid image format. Deprecated in v2.6.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
await _create_guild(_name=..., _icon=..., _code=...)
```

----------------------------------------

TITLE: Create Application Emoji
DESCRIPTION: Creates an emoji for the current application. Requires the emoji name and image data (JPG, PNG, GIF). Returns the created emoji object. Added in version 2.5.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
await _create_application_emoji(_name=..., _image=...)
```

----------------------------------------

TITLE: Fetch Guild Preview
DESCRIPTION: Fetches a preview of a Discord guild using its ID. This is useful for guilds that are discoverable, even if the user is not a member. It can raise NotFound or HTTPException.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
async def _fetch_guild_preview(guild_id):
    """Retrieves a preview of a `Guild` from an ID. If the guild is discoverable, you don't have to be a member of it.

    Exceptions:
        NotFound: The guild doesn't exist, or is not discoverable and you are not in it.
        HTTPException: Guildの取得に失敗した場合。
    """
    pass
```

----------------------------------------

TITLE: Add Client.fetch_premium_sticker_pack
DESCRIPTION: Adds `Client.fetch_premium_sticker_pack()` to retrieve information about premium sticker packs.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: Python
CODE:
```
from discord.client import Client

# Example usage (conceptual):
# sticker_pack = await client.fetch_premium_sticker_pack(sticker_pack_id)

```

----------------------------------------

TITLE: AsyncIterator.next() から anext() への移行
DESCRIPTION: カスタム `AsyncIterator.next()` メソッドの使用から、標準的な `anext()` 関数への移行を示すコード例です。`anext()` は Python 3.10 以降で利用可能で、それ以前のバージョンでは `__anext__()` を使用します。

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
# before
it = channel.history()
while True:
    try:
        message = await self.next()
    except discord.NoMoreItems:
        break
    print(f'Found message with ID {message.id}')

# after
async for message in channel.history():
    print(f'Found message with ID {message.id}')
```

LANGUAGE: Python
CODE:
```
# before
it = channel.history()
first = await it.next()
if first.content == 'do not iterate':
    return
async for message in it:
    ...

# after
it = channel.history()
first = await anext(it)  # await it.__anext__() on Python<3.10
if first.content == 'do not iterate':
    return
async for message in it:
    ...
```

----------------------------------------

TITLE: Add Platform and Assets to Activities
DESCRIPTION: Enhances the `Activity` and `Game` classes by adding support for `platform` and `assets`. This allows for richer representation of user activities, including platform information and associated assets.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
Add support for platform and assets to activities (GH-9677).
    
    * Add `Activity.platform`.
    * Add `Game.platform`.
    * Add `Game.assets`.
```

----------------------------------------

TITLE: discord.py v2.0: Embed.Empty から None への変更
DESCRIPTION: discord.py v2.0 では、埋め込みの空の属性を示すために使用されていた Embed.Empty センチネルが削除され、None に置き換えられました。これにより、埋め込みの比較方法が変更され、ハッシュ化できなくなりました。

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
# before
embed = discord.Embed(title='foo')
embed.title = discord.Embed.Empty
embed == embed.copy() # False

# after
embed = discord.Embed(title='foo')
embed.title = None
embed == embed.copy() # True
{embed, embed} # Raises TypeError
```

----------------------------------------

TITLE: discord.py v2.0: フラグクラスの bool() 実装
DESCRIPTION: discord.py v2.0 では、フラグクラスのインスタンスに何らかのフラグが立っているかどうかを確認しやすくするために、bool() がカスタム実装されました。これにより、フラグが最低一個有効の場合に True を返すようになります。

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
# Intents, MemberCacheFlags, MessageFlags, Permissions, PublicUserFlags, SystemChannelFlags
```

----------------------------------------

TITLE: Add PartialAppInfo and AppInfo properties
DESCRIPTION: Adds various new properties to `PartialAppInfo` and `AppInfo`.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
`PartialAppInfo` と `AppInfo` にさまざまな新しいプロパティを追加しました。 (GH-9298)
```

----------------------------------------

TITLE: [ext.commands] Support typing.NewType and type Aliases
DESCRIPTION: Extends `ext.commands` to support `typing.NewType` and `type` keyword type aliases, including for application commands. This improves type hinting and command definition.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
[ext.commands] Add support for `typing.NewType` and `type` keyword type aliases (GH-9815).
    
    * Also supports application commands.
```

----------------------------------------

TITLE: AsyncIterator.find() から discord.utils.find への移行
DESCRIPTION: 監査ログから特定の条件に一致するイベントを検索する際に、`AsyncIterator.find()` から `discord.utils.find()` ユーティリティ関数への移行を示すコード例です。

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
def predicate(event):
    return event.reason is not None

# before
event = await guild.audit_logs().find(predicate)

# after
event = await discord.utils.find(predicate, guild.audit_logs())
```

----------------------------------------

TITLE: Add ext.commands Context.filesize_limit
DESCRIPTION: Adds the `Context.filesize_limit` attribute to command contexts.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
[ext.commands] `Context.filesize_limit` 属性を追加しました。 (GH-9416)
```

----------------------------------------

TITLE: AsyncIterator.map() からリスト内包表記への移行
DESCRIPTION: メッセージ履歴からメッセージの内容のリストを取得する際に、`AsyncIterator.map()` メソッドから非同期リスト内包表記への移行を示すコード例です。

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
# before
content_of_messages = []
async for content in channel.history().map(lambda m: m.content):
    content_of_messages.append(content)

# after
content_of_messages = [message.content async for message in channel.history()]
```

----------------------------------------

TITLE: Add Guild.create_forum() parameters
DESCRIPTION: Adds support for `default_reaction_emoji` and `default_forum_layout` in `Guild.create_forum()`.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
`Guild.create_forum()` にて、 `default_reaction_emoji` と `default_forum_layout` のサポートを追加しました。 (GH-9300)
```

----------------------------------------

TITLE: Specify Application Command Tree Class
DESCRIPTION: Specifies the type of application command tree to use. Defaults to discord.app_commands.tree.CommandTree.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
from discord.app_commands import CommandTree

class CustomCommandTree(CommandTree):
    pass

bot = commands.Bot(command_prefix='!', tree_cls=CustomCommandTree)
```

----------------------------------------

TITLE: Support for Soundboard and VC Effects
DESCRIPTION: Adds comprehensive support for soundboards and voice channel effects. This includes new models for sounds and effects, methods for sending sounds, and updates to audit log actions and events related to soundboard operations and voice channel effects.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: Python
CODE:
```
from discord.guild import Guild
from discord.ext.commands import Converter

# Example usage (conceptual):
# await voice_channel.send_sound(sound)
# guild_sounds = await guild.soundboard_sounds()
# class SoundboardSoundConverter(Converter):
#     async def convert(self, ctx, argument):
#         # ... conversion logic ...

```

----------------------------------------

TITLE: Fetch Template by Code or URL
DESCRIPTION: Retrieves a Template object from a Discord template code or URL. Handles invalid templates and fetch failures.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: python
CODE:
```
await client.fetch_template(code)
```

----------------------------------------

TITLE: Create Context from Interaction
DESCRIPTION: Creates a context from a Discord Interaction, typically used for application commands like slash commands or context menus. It handles different interaction types and provides access to command-specific details.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
await _from_interaction(_interaction_ , _/_)
```

----------------------------------------

TITLE: Set Bot Help Command
DESCRIPTION: Specifies the implementation for the help command, which can also be set dynamically. Set to None to remove the help command.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
from discord.ext import commands

class MyHelpCommand(commands.HelpCommand):
    async def send_bot_help(self, mapping):
        # Custom help logic
        pass

bot = commands.Bot(command_prefix='!', help_command=MyHelpCommand())
```

----------------------------------------

TITLE: [ext.commands] Support Positional-Only Flag Parameters
DESCRIPTION: Introduces support for positional-only flag parameters in `ext.commands`, allowing for more precise command argument definition.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
[ext.commands] Add support for positional-only flag parameters (GH-9805).
```

----------------------------------------

TITLE: [ext.commands] Fix Nested HybridGroup Manual App Commands
DESCRIPTION: Resolves an issue where nested `HybridGroup`s were inserting manual application commands incorrectly in `ext.commands`.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
[ext.commands] Fix nested `HybridGroup`'s inserting manual app commands.
```

----------------------------------------

TITLE: Handle Extension Already Loaded Exception in discord.py
DESCRIPTION: This exception is raised when an attempt is made to load an extension that is already loaded. It inherits from ExtensionError and prevents duplicate loading of extensions.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: python
CODE:
```
class ExtensionAlreadyLoaded(ExtensionError):
    """Raised when an extension is already loaded.

    Inherited from ExtensionError.
    """
    pass
```

----------------------------------------

TITLE: Configure Strip After Prefix
DESCRIPTION: Determines whether to strip whitespace after the command prefix. When enabled, commands like '! hello' and '!hello' will both work if the prefix is '!'. Defaults to False.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
bot = commands.Bot(command_prefix='!', strip_after_prefix=True)
```

----------------------------------------

TITLE: Add SoundboardSoundConverter
DESCRIPTION: Introduces `SoundboardSoundConverter` within the `ext.commands` extension for easier conversion of soundboard sound arguments in commands.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: Python
CODE:
```
from discord.ext.commands import Converter

# Example usage (conceptual):
# @bot.command()
# async def play_sound(ctx, sound: SoundboardSoundConverter):
#     # ... play sound ...

```

----------------------------------------

TITLE: Add Shortcut for CategoryChannel Forums
DESCRIPTION: Provides a convenient shortcut for accessing forums within a `CategoryChannel`.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
import discord

async def get_category_forums(category: discord.CategoryChannel):
    forums = category.forums
    print(f"Forums in category '{category.name}':")
    for forum in forums:
        print(f"- {forum.name}")
```

----------------------------------------

TITLE: on_member_update と on_presence_update の分離
DESCRIPTION: メンバーのニックネーム変更とステータス変更を処理するためのイベントハンドラを分離するコード例です。以前は `on_member_update` で両方を処理していましたが、v2.0ではプレゼンスの変更は `on_presence_update` に分離されました。

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
# before
@client.event
async def on_member_update(self, before, after):
    if before.nick != after.nick:
        await nick_changed(before, after)
    if before.status != after.status:
        await status_changed(before, after)

# after
@client.event
async def on_member_update(self, before, after):
    if before.nick != after.nick:
        await nick_changed(before, after)

@client.event
async def on_presence_update(self, before, after):
    if before.status != after.status:
        await status_changed(before, after)
```

----------------------------------------

TITLE: Additional Documentation for Logging
DESCRIPTION: Provides supplementary documentation for the logging capabilities within the library, aiding users in understanding and utilizing logging features.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
Additional documentation added for logging capabilities.
```

----------------------------------------

TITLE: [ext.commands] Fix HybridGroup Wrapped Instance Sync
DESCRIPTION: Addresses an issue where `HybridGroup` wrapped instances were out of sync in `ext.commands`, ensuring proper state management.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
[ext.commands] Fix an issue where `HybridGroup` wrapped instances would be out of sync.
```

----------------------------------------

TITLE: Convert to Game
DESCRIPTION: Converts a string argument into a Game object.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
class discord.ext.commands.GameConverter:
    async def convert(self, ctx, argument):
        # Converts to a Game
        pass
```

----------------------------------------

TITLE: Add support for new username system
DESCRIPTION: Introduces support for Discord's new username system, including global nicknames and updated display name handling.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
新しいユーザー名システム ("pomelo"とも呼ばれます) のサポートを追加しました。
    
    * グローバルのニックネーム、つまり「表示名」を取得する `User.global_name` を追加しました。
    * `User.display_name` と `Member.display_name` を、グローバルのニックネームを使用するように変更しました。
    * `User` の `__str__` が、移行したユーザーのタグを含まないよう、変更しました。
    * 移行したユーザーでも動くよう `Guild.get_member_named()` を変更しました。
    * 移行したユーザーでも動くよう `User.default_avatar` を変更しました。
    * [ext.commands] 移行したユーザーを解釈するよう、ユーザーとメンバーコンバータを変更しました。
```

----------------------------------------

TITLE: Performance Increase for Permissions Construction
DESCRIPTION: Improves the performance of constructing `Permissions` objects using keyword arguments, leading to faster initialization.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
Performance increases of constructing `Permissions` using keyword arguments.
```

----------------------------------------

TITLE: [ext.commands] Fallback Behaviour for CurrentGuild
DESCRIPTION: Adds fallback behavior to `CurrentGuild` in `ext.commands`, improving its robustness when guild information is not readily available.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
[ext.commands] Add fallback behaviour to `CurrentGuild`.
```

----------------------------------------

TITLE: [ext.commands] Support Channel URLs in ChannelConverter
DESCRIPTION: Adds support for channel URLs in `ChannelConverter` related classes within `ext.commands`, enabling conversion of channel URLs to channel objects.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
[ext.commands] Add support for channel URLs in ChannelConverter related classes (GH-9799).
```

----------------------------------------

TITLE: Fetch All Premium Sticker Packs
DESCRIPTION: Retrieves all available premium sticker packs. This function was added in version 2.0.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: python
CODE:
```
await client.fetch_premium_sticker_packs()
```

----------------------------------------

TITLE: Create DM Channel
DESCRIPTION: Creates a DMChannel with a specified user. This is rarely needed as it's usually handled automatically. Added in version 2.0.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
await _create_dm(user)
```

----------------------------------------

TITLE: Send Help Message
DESCRIPTION: Displays the help message for a given entity (command or cog). If no entity is specified, it shows the bot's overall help. It can also search for commands or cogs by name.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
await _send_help(_entity= <bot>_)
```

----------------------------------------

TITLE: Convert to Invite
DESCRIPTION: Converts a string argument into an Invite object using an HTTP request via `Bot.fetch_invite()`. It raises `BadInviteArgument` on failure.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
class discord.ext.commands.InviteConverter:
    async def convert(self, ctx, argument):
        # Converts to an Invite
        # Uses Bot.fetch_invite()
        pass
```

----------------------------------------

TITLE: Improve SyncWebhook and Webhook __repr__
DESCRIPTION: Enhances the `__repr__` method for `SyncWebhook` and `Webhook` objects, providing more informative string representations.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
Improve `__repr__` of `SyncWebhook` and `Webhook` (GH-9764).
```

----------------------------------------

TITLE: Add new Permissions
DESCRIPTION: Introduces new permissions including `manage_expressions`, `use_external_sounds`, `use_soundboard`, `send_voice_messages`, and `create_expressions`.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
新しい `Permissions` を追加しました。 (GH-9312 、 GH-9325 、 GH-9358 、 GH-9378)
    
    * 新しい `manage_expressions` 、 `use_external_sounds` 、 `use_soundboard` 、 `send_voice_messages` 、 `create_expressions` 権限を追加しました。
    * `Permissions.manage_emojis` を `manage_expressions` のエイリアスに変更しました。
```

----------------------------------------

TITLE: AsyncIterator.chunk() から discord.utils.as_chunks への移行
DESCRIPTION: リアクションのユーザーリストをチャンクに分割する際に、`AsyncIterator.chunk()` メソッドから `discord.utils.as_chunks()` ユーティリティ関数への移行を示すコード例です。

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
# before
async for leader, *users in reaction.users().chunk(3):
    ...

# after
async for leader, *users in discord.utils.as_chunks(reaction.users(), 3):
    ...
```

----------------------------------------

TITLE: Support for ChannelType Media
DESCRIPTION: Introduces `ChannelType.media` and the `ForumChannel.is_media()` method, enabling the identification and handling of media-specific forum channels.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
import discord

async def check_channel_type(channel: discord.abc.GuildChannel):
    if isinstance(channel, discord.ForumChannel):
        if channel.is_media():
            print(f"Channel '{channel.name}' is a media forum channel.")
        else:
            print(f"Channel '{channel.name}' is a regular forum channel.")
```

----------------------------------------

TITLE: Support Reaction Types in Raw and Non-Raw Models
DESCRIPTION: Adds support for reaction types in both raw and non-raw models, ensuring consistent handling of reactions across different data formats.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
Add support for reaction types to raw and non-raw models (GH-9836).
```

----------------------------------------

TITLE: discord.py v2.0: channel.history() の非同期イテレータ
DESCRIPTION: discord.py v2.0 では、channel.history() が非同期イテレータを返すように変更されました。これにより、メッセージの取得方法が変更され、StopAsyncIteration 例外が使用されるようになりました。

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
user_messages = [message async for message in channel.history() if not m.author.bot]
```

----------------------------------------

TITLE: Member.edit() の使用例
DESCRIPTION: メンバーのニックネームを更新し、新しいニックネームを確認するコード例です。`member.edit()` メソッドは更新されたメンバーオブジェクトを返します。

SOURCE: https://discordpy.readthedocs.io/ja/stable/migrating

LANGUAGE: Python
CODE:
```
updated_member = await member.edit(nick='new nick')
await member.send(f'Your new nick is {updated_member.nick}')
```

----------------------------------------

TITLE: Fetch Entitlements
DESCRIPTION: Retrieves a list of entitlements for an application, with options to limit results, filter by date (before/after), SKUs, or user, and to exclude ended or deleted entitlements. It can raise MissingApplicationID or HTTPException.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
async def entitlements(limit=100, *, before=None, after=None, skus=None, user=None, guild=None, exclude_ended=False, exclude_deleted=True):
    """すべてのパラメータがオプションです。

    パラメータ
        limit (Optional[`int`]) -- The number of entitlements to retrieve. If `None`, it retrieves every entitlement for this application. Note, however, that this would make it a slow operation. Defaults to `100`.
        before (Optional[Union[`Snowflake`, `datetime.datetime`]]) -- Retrieve entitlements before this date or entitlement. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.
        after (Optional[Union[`Snowflake`, `datetime.datetime`]]) -- Retrieve entitlements after this date or entitlement. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.
        skus (Optional[Sequence[`Snowflake`]]) -- A list of SKUs to filter by.
        user (Optional[`Snowflake`]) -- The user to filter by.
        guild (Optional[`Snowflake`]) -- The guild to filter by.
        exclude_ended (`bool`) -- Whether to exclude ended entitlements. Defaults to `False`.
        exclude_deleted (`bool`) -- Whether to exclude deleted entitlements. Defaults to `True`.
    バージョン 2.5 で追加.

    例外
        MissingApplicationID -- The application ID could not be found.
        HTTPException -- Fetching the entitlements failed.
        TypeError -- Both `after` and `before` were provided, as Discord does not support this type of pagination.

    列挙
        `Entitlement` -- The entitlement with the application.
    """
    pass
```

----------------------------------------

TITLE: Configure Bot Command Prefix
DESCRIPTION: Sets the prefix for commands. It can be a string, a callable returning a prefix, or an iterable of strings. An empty string disables the prefix, and careful ordering is needed for multiple prefixes to avoid conflicts.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: Python
CODE:
```
bot = commands.Bot(command_prefix='!')
# or
# bot = commands.Bot(command_prefix=lambda msg: '!' if msg.guild is None else '?')
# or
# bot = commands.Bot(command_prefix=['!', '!!'])
# or
# bot = commands.Bot(command_prefix=['', '!'])

```

----------------------------------------

TITLE: Support for Default Values on Select Menus
DESCRIPTION: Introduces `SelectDefaultValue` and `SelectDefaultValueType` to set default values for specialized select menus, enhancing user experience.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
import discord
from discord import ui

# Example of a select menu with default values
class MySelectMenu(ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="Option A", value="a"),
            discord.SelectOption(label="Option B", value="b", default=True),
            discord.SelectOption(label="Option C", value="c")
        ]
        super().__init__(placeholder="Choose an option...", options=options, default_values=[discord.SelectDefaultValue(discord.SelectDefaultValueType.user_selected, "b")])

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_message(f"You selected: {self.values[0]}")

# Example of using the select menu
async def send_select_menu(channel: discord.TextChannel):
    view = ui.View()
    view.add_item(MySelectMenu())
    await channel.send("Please select an option:", view=view)
```

----------------------------------------

TITLE: Fetch Bot SKUs
DESCRIPTION: Retrieves the bot's available SKUs (Stock Keeping Units). This function requires the application ID and was added in version 2.4.

SOURCE: https://discordpy.readthedocs.io/ja/stable/ext/commands/api

LANGUAGE: python
CODE:
```
await client.fetch_skus()
```

----------------------------------------

TITLE: [ext.commands] Fix HybridGroup Fallback Localization
DESCRIPTION: Corrects localization support for `HybridGroup` fallback in `ext.commands`, ensuring consistent language handling.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
[ext.commands] Fix localization support for `HybridGroup` fallback.
```

----------------------------------------

TITLE: Fix FFmpegAudio and Related Subclasses
DESCRIPTION: Addresses fixes and improvements for `FFmpegAudio` and all its related subclasses, enhancing audio processing capabilities.

SOURCE: https://discordpy.readthedocs.io/ja/stable/whats_new

LANGUAGE: python
CODE:
```
Fixes and improvements for `FFmpegAudio` and all related subclasses (GH-9528).
```